/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './../app/__root'
import { Route as SetupRouteRouteImport } from './../app/_setup/route'
import { Route as MainRouteRouteImport } from './../app/_main/route'
import { Route as RouteRouteImport } from './../app/route'
import { Route as MainSettingsIndexRouteImport } from './../app/_main/settings/index'
import { Route as MainProjectsIndexRouteImport } from './../app/_main/projects/index'
import { Route as MainLogIndexRouteImport } from './../app/_main/log/index'
import { Route as MainDevPaletteIndexRouteImport } from './../app/_main/dev-palette/index'
import { Route as SetupSetupUnityHubIndexRouteImport } from './../app/_setup/setup/unity-hub/index'
import { Route as SetupSetupSystemSettingIndexRouteImport } from './../app/_setup/setup/system-setting/index'
import { Route as SetupSetupProjectPathIndexRouteImport } from './../app/_setup/setup/project-path/index'
import { Route as SetupSetupFinishIndexRouteImport } from './../app/_setup/setup/finish/index'
import { Route as SetupSetupBackupsIndexRouteImport } from './../app/_setup/setup/backups/index'
import { Route as SetupSetupAppearanceIndexRouteImport } from './../app/_setup/setup/appearance/index'
import { Route as MainSettingsLicensesIndexRouteImport } from './../app/_main/settings/licenses/index'
import { Route as MainProjectsManageIndexRouteImport } from './../app/_main/projects/manage/index'
import { Route as MainPackagesUserPackagesIndexRouteImport } from './../app/_main/packages/user-packages/index'
import { Route as MainPackagesTemplatesIndexRouteImport } from './../app/_main/packages/templates/index'
import { Route as MainPackagesRepositoriesIndexRouteImport } from './../app/_main/packages/repositories/index'

const SetupRouteRoute = SetupRouteRouteImport.update({
  id: '/_setup',
  getParentRoute: () => rootRouteImport,
} as any)
const MainRouteRoute = MainRouteRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any)
const RouteRoute = RouteRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MainSettingsIndexRoute = MainSettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainProjectsIndexRoute = MainProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainLogIndexRoute = MainLogIndexRouteImport.update({
  id: '/log/',
  path: '/log/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainDevPaletteIndexRoute = MainDevPaletteIndexRouteImport.update({
  id: '/dev-palette/',
  path: '/dev-palette/',
  getParentRoute: () => MainRouteRoute,
} as any)
const SetupSetupUnityHubIndexRoute = SetupSetupUnityHubIndexRouteImport.update({
  id: '/setup/unity-hub/',
  path: '/setup/unity-hub/',
  getParentRoute: () => SetupRouteRoute,
} as any)
const SetupSetupSystemSettingIndexRoute =
  SetupSetupSystemSettingIndexRouteImport.update({
    id: '/setup/system-setting/',
    path: '/setup/system-setting/',
    getParentRoute: () => SetupRouteRoute,
  } as any)
const SetupSetupProjectPathIndexRoute =
  SetupSetupProjectPathIndexRouteImport.update({
    id: '/setup/project-path/',
    path: '/setup/project-path/',
    getParentRoute: () => SetupRouteRoute,
  } as any)
const SetupSetupFinishIndexRoute = SetupSetupFinishIndexRouteImport.update({
  id: '/setup/finish/',
  path: '/setup/finish/',
  getParentRoute: () => SetupRouteRoute,
} as any)
const SetupSetupBackupsIndexRoute = SetupSetupBackupsIndexRouteImport.update({
  id: '/setup/backups/',
  path: '/setup/backups/',
  getParentRoute: () => SetupRouteRoute,
} as any)
const SetupSetupAppearanceIndexRoute =
  SetupSetupAppearanceIndexRouteImport.update({
    id: '/setup/appearance/',
    path: '/setup/appearance/',
    getParentRoute: () => SetupRouteRoute,
  } as any)
const MainSettingsLicensesIndexRoute =
  MainSettingsLicensesIndexRouteImport.update({
    id: '/settings/licenses/',
    path: '/settings/licenses/',
    getParentRoute: () => MainRouteRoute,
  } as any)
const MainProjectsManageIndexRoute = MainProjectsManageIndexRouteImport.update({
  id: '/projects/manage/',
  path: '/projects/manage/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainPackagesUserPackagesIndexRoute =
  MainPackagesUserPackagesIndexRouteImport.update({
    id: '/packages/user-packages/',
    path: '/packages/user-packages/',
    getParentRoute: () => MainRouteRoute,
  } as any)
const MainPackagesTemplatesIndexRoute =
  MainPackagesTemplatesIndexRouteImport.update({
    id: '/packages/templates/',
    path: '/packages/templates/',
    getParentRoute: () => MainRouteRoute,
  } as any)
const MainPackagesRepositoriesIndexRoute =
  MainPackagesRepositoriesIndexRouteImport.update({
    id: '/packages/repositories/',
    path: '/packages/repositories/',
    getParentRoute: () => MainRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof RouteRoute
  '/dev-palette': typeof MainDevPaletteIndexRoute
  '/log': typeof MainLogIndexRoute
  '/projects': typeof MainProjectsIndexRoute
  '/settings': typeof MainSettingsIndexRoute
  '/packages/repositories': typeof MainPackagesRepositoriesIndexRoute
  '/packages/templates': typeof MainPackagesTemplatesIndexRoute
  '/packages/user-packages': typeof MainPackagesUserPackagesIndexRoute
  '/projects/manage': typeof MainProjectsManageIndexRoute
  '/settings/licenses': typeof MainSettingsLicensesIndexRoute
  '/setup/appearance': typeof SetupSetupAppearanceIndexRoute
  '/setup/backups': typeof SetupSetupBackupsIndexRoute
  '/setup/finish': typeof SetupSetupFinishIndexRoute
  '/setup/project-path': typeof SetupSetupProjectPathIndexRoute
  '/setup/system-setting': typeof SetupSetupSystemSettingIndexRoute
  '/setup/unity-hub': typeof SetupSetupUnityHubIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof RouteRoute
  '/dev-palette': typeof MainDevPaletteIndexRoute
  '/log': typeof MainLogIndexRoute
  '/projects': typeof MainProjectsIndexRoute
  '/settings': typeof MainSettingsIndexRoute
  '/packages/repositories': typeof MainPackagesRepositoriesIndexRoute
  '/packages/templates': typeof MainPackagesTemplatesIndexRoute
  '/packages/user-packages': typeof MainPackagesUserPackagesIndexRoute
  '/projects/manage': typeof MainProjectsManageIndexRoute
  '/settings/licenses': typeof MainSettingsLicensesIndexRoute
  '/setup/appearance': typeof SetupSetupAppearanceIndexRoute
  '/setup/backups': typeof SetupSetupBackupsIndexRoute
  '/setup/finish': typeof SetupSetupFinishIndexRoute
  '/setup/project-path': typeof SetupSetupProjectPathIndexRoute
  '/setup/system-setting': typeof SetupSetupSystemSettingIndexRoute
  '/setup/unity-hub': typeof SetupSetupUnityHubIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof RouteRoute
  '/_main': typeof MainRouteRouteWithChildren
  '/_setup': typeof SetupRouteRouteWithChildren
  '/_main/dev-palette/': typeof MainDevPaletteIndexRoute
  '/_main/log/': typeof MainLogIndexRoute
  '/_main/projects/': typeof MainProjectsIndexRoute
  '/_main/settings/': typeof MainSettingsIndexRoute
  '/_main/packages/repositories/': typeof MainPackagesRepositoriesIndexRoute
  '/_main/packages/templates/': typeof MainPackagesTemplatesIndexRoute
  '/_main/packages/user-packages/': typeof MainPackagesUserPackagesIndexRoute
  '/_main/projects/manage/': typeof MainProjectsManageIndexRoute
  '/_main/settings/licenses/': typeof MainSettingsLicensesIndexRoute
  '/_setup/setup/appearance/': typeof SetupSetupAppearanceIndexRoute
  '/_setup/setup/backups/': typeof SetupSetupBackupsIndexRoute
  '/_setup/setup/finish/': typeof SetupSetupFinishIndexRoute
  '/_setup/setup/project-path/': typeof SetupSetupProjectPathIndexRoute
  '/_setup/setup/system-setting/': typeof SetupSetupSystemSettingIndexRoute
  '/_setup/setup/unity-hub/': typeof SetupSetupUnityHubIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dev-palette'
    | '/log'
    | '/projects'
    | '/settings'
    | '/packages/repositories'
    | '/packages/templates'
    | '/packages/user-packages'
    | '/projects/manage'
    | '/settings/licenses'
    | '/setup/appearance'
    | '/setup/backups'
    | '/setup/finish'
    | '/setup/project-path'
    | '/setup/system-setting'
    | '/setup/unity-hub'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dev-palette'
    | '/log'
    | '/projects'
    | '/settings'
    | '/packages/repositories'
    | '/packages/templates'
    | '/packages/user-packages'
    | '/projects/manage'
    | '/settings/licenses'
    | '/setup/appearance'
    | '/setup/backups'
    | '/setup/finish'
    | '/setup/project-path'
    | '/setup/system-setting'
    | '/setup/unity-hub'
  id:
    | '__root__'
    | '/'
    | '/_main'
    | '/_setup'
    | '/_main/dev-palette/'
    | '/_main/log/'
    | '/_main/projects/'
    | '/_main/settings/'
    | '/_main/packages/repositories/'
    | '/_main/packages/templates/'
    | '/_main/packages/user-packages/'
    | '/_main/projects/manage/'
    | '/_main/settings/licenses/'
    | '/_setup/setup/appearance/'
    | '/_setup/setup/backups/'
    | '/_setup/setup/finish/'
    | '/_setup/setup/project-path/'
    | '/_setup/setup/system-setting/'
    | '/_setup/setup/unity-hub/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  RouteRoute: typeof RouteRoute
  MainRouteRoute: typeof MainRouteRouteWithChildren
  SetupRouteRoute: typeof SetupRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_setup': {
      id: '/_setup'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SetupRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof RouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main/settings/': {
      id: '/_main/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof MainSettingsIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/projects/': {
      id: '/_main/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof MainProjectsIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/log/': {
      id: '/_main/log/'
      path: '/log'
      fullPath: '/log'
      preLoaderRoute: typeof MainLogIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/dev-palette/': {
      id: '/_main/dev-palette/'
      path: '/dev-palette'
      fullPath: '/dev-palette'
      preLoaderRoute: typeof MainDevPaletteIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_setup/setup/unity-hub/': {
      id: '/_setup/setup/unity-hub/'
      path: '/setup/unity-hub'
      fullPath: '/setup/unity-hub'
      preLoaderRoute: typeof SetupSetupUnityHubIndexRouteImport
      parentRoute: typeof SetupRouteRoute
    }
    '/_setup/setup/system-setting/': {
      id: '/_setup/setup/system-setting/'
      path: '/setup/system-setting'
      fullPath: '/setup/system-setting'
      preLoaderRoute: typeof SetupSetupSystemSettingIndexRouteImport
      parentRoute: typeof SetupRouteRoute
    }
    '/_setup/setup/project-path/': {
      id: '/_setup/setup/project-path/'
      path: '/setup/project-path'
      fullPath: '/setup/project-path'
      preLoaderRoute: typeof SetupSetupProjectPathIndexRouteImport
      parentRoute: typeof SetupRouteRoute
    }
    '/_setup/setup/finish/': {
      id: '/_setup/setup/finish/'
      path: '/setup/finish'
      fullPath: '/setup/finish'
      preLoaderRoute: typeof SetupSetupFinishIndexRouteImport
      parentRoute: typeof SetupRouteRoute
    }
    '/_setup/setup/backups/': {
      id: '/_setup/setup/backups/'
      path: '/setup/backups'
      fullPath: '/setup/backups'
      preLoaderRoute: typeof SetupSetupBackupsIndexRouteImport
      parentRoute: typeof SetupRouteRoute
    }
    '/_setup/setup/appearance/': {
      id: '/_setup/setup/appearance/'
      path: '/setup/appearance'
      fullPath: '/setup/appearance'
      preLoaderRoute: typeof SetupSetupAppearanceIndexRouteImport
      parentRoute: typeof SetupRouteRoute
    }
    '/_main/settings/licenses/': {
      id: '/_main/settings/licenses/'
      path: '/settings/licenses'
      fullPath: '/settings/licenses'
      preLoaderRoute: typeof MainSettingsLicensesIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/projects/manage/': {
      id: '/_main/projects/manage/'
      path: '/projects/manage'
      fullPath: '/projects/manage'
      preLoaderRoute: typeof MainProjectsManageIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/packages/user-packages/': {
      id: '/_main/packages/user-packages/'
      path: '/packages/user-packages'
      fullPath: '/packages/user-packages'
      preLoaderRoute: typeof MainPackagesUserPackagesIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/packages/templates/': {
      id: '/_main/packages/templates/'
      path: '/packages/templates'
      fullPath: '/packages/templates'
      preLoaderRoute: typeof MainPackagesTemplatesIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/packages/repositories/': {
      id: '/_main/packages/repositories/'
      path: '/packages/repositories'
      fullPath: '/packages/repositories'
      preLoaderRoute: typeof MainPackagesRepositoriesIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
  }
}

interface MainRouteRouteChildren {
  MainDevPaletteIndexRoute: typeof MainDevPaletteIndexRoute
  MainLogIndexRoute: typeof MainLogIndexRoute
  MainProjectsIndexRoute: typeof MainProjectsIndexRoute
  MainSettingsIndexRoute: typeof MainSettingsIndexRoute
  MainPackagesRepositoriesIndexRoute: typeof MainPackagesRepositoriesIndexRoute
  MainPackagesTemplatesIndexRoute: typeof MainPackagesTemplatesIndexRoute
  MainPackagesUserPackagesIndexRoute: typeof MainPackagesUserPackagesIndexRoute
  MainProjectsManageIndexRoute: typeof MainProjectsManageIndexRoute
  MainSettingsLicensesIndexRoute: typeof MainSettingsLicensesIndexRoute
}

const MainRouteRouteChildren: MainRouteRouteChildren = {
  MainDevPaletteIndexRoute: MainDevPaletteIndexRoute,
  MainLogIndexRoute: MainLogIndexRoute,
  MainProjectsIndexRoute: MainProjectsIndexRoute,
  MainSettingsIndexRoute: MainSettingsIndexRoute,
  MainPackagesRepositoriesIndexRoute: MainPackagesRepositoriesIndexRoute,
  MainPackagesTemplatesIndexRoute: MainPackagesTemplatesIndexRoute,
  MainPackagesUserPackagesIndexRoute: MainPackagesUserPackagesIndexRoute,
  MainProjectsManageIndexRoute: MainProjectsManageIndexRoute,
  MainSettingsLicensesIndexRoute: MainSettingsLicensesIndexRoute,
}

const MainRouteRouteWithChildren = MainRouteRoute._addFileChildren(
  MainRouteRouteChildren,
)

interface SetupRouteRouteChildren {
  SetupSetupAppearanceIndexRoute: typeof SetupSetupAppearanceIndexRoute
  SetupSetupBackupsIndexRoute: typeof SetupSetupBackupsIndexRoute
  SetupSetupFinishIndexRoute: typeof SetupSetupFinishIndexRoute
  SetupSetupProjectPathIndexRoute: typeof SetupSetupProjectPathIndexRoute
  SetupSetupSystemSettingIndexRoute: typeof SetupSetupSystemSettingIndexRoute
  SetupSetupUnityHubIndexRoute: typeof SetupSetupUnityHubIndexRoute
}

const SetupRouteRouteChildren: SetupRouteRouteChildren = {
  SetupSetupAppearanceIndexRoute: SetupSetupAppearanceIndexRoute,
  SetupSetupBackupsIndexRoute: SetupSetupBackupsIndexRoute,
  SetupSetupFinishIndexRoute: SetupSetupFinishIndexRoute,
  SetupSetupProjectPathIndexRoute: SetupSetupProjectPathIndexRoute,
  SetupSetupSystemSettingIndexRoute: SetupSetupSystemSettingIndexRoute,
  SetupSetupUnityHubIndexRoute: SetupSetupUnityHubIndexRoute,
}

const SetupRouteRouteWithChildren = SetupRouteRoute._addFileChildren(
  SetupRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  RouteRoute: RouteRoute,
  MainRouteRoute: MainRouteRouteWithChildren,
  SetupRouteRoute: SetupRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
